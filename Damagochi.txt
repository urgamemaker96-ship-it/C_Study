지금 까지 코딩했던 다마고치 코드를 슈도코드로 고치고 고친 슈도코드를 주석다는 것으로 고친다.

//2단계
#인클루드 헤더파일
#인클루드 rand()함수 라이브러리
#인클루드 time()함수 라이브러리


int 스킬1함수(int,int,int)
int 스킬2함수(int,int,int)

int 스킬1함수(넘버1, 넘버2,넘버3)
{
	int 총공격 = 넘버1+넘버2
	스킬설명 출력
	적에게 총공격 수치만큼 피해입혔다 출력
	리턴 = 넘버3 - 총공격
}
int 스킬2함수(넘버1, 넘버2, 넘버3)
{
	int 총공격 = 넘버1+넘버2
	스킬설명 출력
	다마고치에게 총공격 수치만큼 피해를 입혔다 출력
	리턴 = 넘버3 - 총공격
}





int 메인함수(void)
{	
	int 마나 = 100;
	int 최대체력 = 100;
	int 체력 = 0;
	int 포만도 = 0;
	int 배변활동 = 50;
	int 입력받는변수;
	int 스트레스 = 40;	
	int 배틀애너미 체력 = 100;
	int 배틀애너미 공격력 = 40;
	int 경험치 = 0;
	int 현재레벨 = 1;
	int 게임온 = 1;
	int 보상골드 = 8000;


	srand함수(unsigned int)time(NULL)

	반복문(게임온)
	{
		if(배변활동 >= 100 || 스트레스 >=100)
		{
			다마고치병걸렸다.
			게임오버됐다.
			종료제어문
		}

		if(최신레벨 ==10)
		{
			다마고치가완전히성장했다.
			게임오버됐다.
			종료제어문

		}

		상자모양 테두리
		상태창
		체력출력
		포만도출력
		배변활동출력
		스트레스출력
		경험치출력
		현재골드출력
		상자모양 테두리
	

		상자모양 테두리
		1.잠자기 2.응가하기 3.밥주기 출력 4.산책하기 출력 5.터그활동 출력 6.상점출력 7.다마고치 		가이드라인출력
		상자모양 테두리
		입력: 출력

		입력받는변수 입력


		분기문(입력받을변수)
		1번 : 
			if(체력 >= 최대체력)
			{
				더이상 잘필요가 없다.
				스트레스 = 스트레스 + 10
			}
			else
			{
				체력 = 체력+10
				다마고치 체력 10 증가 출력
			}
			
			if(마나 >= 100)
			{
				마나 = 마나 +10
				다마고치 마나가 10증가했습니다.
			}


			종료제어문

		2번 :
			배변활동 = 0;
			다마고치 배변활동 0 출력
			종료제어문
		3번:
			if(포만도 >= 200)
			{
				더이상 먹을필요없다 출력
			
			}
			else
			{
				포만도 = 포만도+20;
				배변활동 = 배변활동 + 20;
				다마고치 포만도 20 증가했다 출력
			}
			종료제어문
		4번: 
		{
			int 퍼센트1 = rand함수 % 100
			if( 퍼센트1 < 50)
			{
			===============================출력
			산책 중 적이 나타났습니다 출력
			int 턴온 = 1;
			int 배틀 애너미체력 = 100;
			int 배틀 애너미공격력 = 20;
			while(턴온)
			{
				=====전투======출력
				적 체력 출력
				내 체력 출력
				내 마나 출력
				원하는 숫자를 눌러 대응하십쇼 출력
				1.공격 2.스킬 3.도망출력
				입력출력
				scanf_s(입력1)

				분기문(입력1)
				{
				case 1:
					배틀애너미체력 -= 고치공격력;
					적에게 고치공격력 만큼 피해를 줬습니다 출력

					if(배틀에너미체력 <=0)
					{
						적이사망했습니다 출력
						턴온 = 0;
						경험치 += 50;
						경험치를 얻었습니다.
						보상골드 +=200;
						골드를 200만큼 얻었습니다 출력
						스트레스가 10 떨어졌습니다 출력
					}
					종료제어문

				case 2:

					다마고치가 스킬을 사용했습니다 출력
					if(마나 < 50)
					{
						마나가 없으면 스킬을 사용하지 못합니다 출력
					}
					else
					{
						마나 -= 50;
						배틀애너미 = 어택애너헬스1함수(체력,고치공격력,적의체력)	
					}
					if(배틀에너미체력 <= 0)
					{
						적이 사망했습니다 출력
						턴온 = 0;
						경험치 +=50;
						경험치를 50만큼 얻었습니다
						보상골드 += 200;
						골드를 200얻었습니다 출력
						스트레스 -= 10;
						스트레스가 10만큼 떨어졌습니다 출력

					}
					종료제어문
				case 3:
					도망쳤습니다 출력
					stress += 10;
					턴온 = 0;
					종료제어문
					
				}
				if(배틀 애너미 체력 >0)
				{
					체력 -= 배틀에너미공격력
					적이 당신을 공격했습니다! 체력 배틀에너미공격력만큼 감소했습니다 출력
					int 퍼센트1 = rand()함수 %100
					if(퍼센트1 < 30)
					{
						체력 = 어택애드헬스2(배틀에너미 체력,배틀애너미공격력,체력)
					}
					if(체력 <=0)
					{
						다마고치가 쓰러졌습니다출력
						턴온 = 0;
						게임온 = 0;
					}
						
				}

			}

		}
		else
		{
			if(스트레스 <= 0)
			{
				스트레스 =0
				더이상 스트레스 지수를 내릴 수 없습니다.
			}
			else
			{
				스트레스 -= 20;
				스트레스가 산책으로인해 20줄었습니다 출력

			}	
		}
	}
	종료제어문
		5번:
			int 퍼센트2 = rand함수 % 100
			if( 퍼센트2 < 50)
			{
			===============================출력
			산책 중 적이 나타났습니다 출력
			int 턴온 = 1;
			int 배틀 애너미체력 = 100;
			int 배틀 애너미공격력 = 20;
			while(턴온)
			{
				=====전투======출력
				적 체력 출력
				내 체력 출력
				내 마나 출력
				원하는 숫자를 눌러 대응하십쇼 출력
				1.공격 2.스킬 3.도망출력
				입력출력
				scanf_s(입력1)

				분기문(입력1)
				{
				case 1:
					배틀애너미체력 -= 고치공격력;
					적에게 고치공격력 만큼 피해를 줬습니다 출력

					if(배틀에너미체력 <=0)
					{
						적이사망했습니다 출력
						턴온 = 0;
						경험치 += 50;
						경험치를 얻었습니다.
						보상골드 +=200;
						골드를 200만큼 얻었습니다 출력
						스트레스가 10 떨어졌습니다 출력
					}
					종료제어문

				case 2:

					다마고치가 스킬을 사용했습니다 출력
					if(마나 < 50)
					{
						마나가 없으면 스킬을 사용하지 못합니다 출력
					}
					else
					{
						마나 -= 50;
						배틀애너미 = 어택애너헬스1함수(체력,고치공격력,적의체력)	
					}
					if(배틀에너미체력 <= 0)
					{
						적이 사망했습니다 출력
						턴온 = 0;
						경험치 +=50;
						경험치를 50만큼 얻었습니다
						보상골드 += 200;
						골드를 200얻었습니다 출력
						스트레스 -= 10;
						스트레스가 10만큼 떨어졌습니다 출력

					}
					종료제어문
				case 3:
					도망쳤습니다 출력
					stress += 10;
					턴온 = 0;
					종료제어문
					
				}
				if(배틀 애너미 체력 >0)
				{
					체력 -= 배틀에너미공격력
					적이 당신을 공격했습니다! 체력 배틀에너미공격력만큼 감소했습니다 출력
					int 퍼센트1 = rand()함수 %100
					if(퍼센트1 < 30)
					{
						체력 = 어택애드헬스2(배틀에너미 체력,배틀애너미공격력,체력)
					}
					if(체력 <=0)
					{
						다마고치가 쓰러졌습니다출력
						턴온 = 0;
						게임온 = 0;
					}
						
				}

			}

		}
		else
		{
			if(스트레스 <= 0)
			{
				스트레스 =0
				더이상 스트레스 지수를 내릴 수 없습니다.
			}
			else
			{
				스트레스 -= 20;
				스트레스가 산책으로인해 20줄었습니다 출력

			}	
		}
	}

			종료제어문
		case 6: 
			if(보상골드 <200)
			{
				돈이없어 이용할수 없습니다.
				종료제어문
			}		
			else
			{
				원하는 물품을 구입하여 주십쇼
				================================출력
				1.최대체력증가포션:200골드 2.공격력증가포션:300골드 3.레벨업포션400골드 출력
				================================출력
				입력 출력

				scanf_s(입력변수1)
				분기문(입력변수1)

				{
				case 1:
					보상골드 -=200;
					최대체력 += 100;
					최대체력이 100증가하여 최대체력이 되었습니다 출력
					종료제어문
				
				case 2:
					보상골드 -=300
					고치공격력 += 50;
					공격력이 50증가하여 고치공격력이 되었습니다 출력
					종료제어문
				case 3:
					보상골드 -=400;
					최근레벨 +=1;
					레벨이 1증가하여 최근레벨이 되었습니다.출력
					종료제어문
}

			}
			case 7:
			다마고치는 스트레스가 100을 찍거나 배변지수가 100일 경우사망 그리고 전투시 체력이 떨어지면 사망합니다 출력
			다마고치는 레벨이 10이되면 최종성장하며 게임이 클리어됩니다 출력
			다마고치는 불가능한 선택을 할때, 도망칠때 스트레스를 10씩 받습니다 출력
			다마고치는 잠을 자거나, 적을 쓰러뜨릴경우 스트레스를 회복합니다 출력
			종료제어문

		if(체력 >= 100*최근레벨*1.2)
		{
			최근레벨++;
			경험치 = 0;
			고치공격력 +=10;
			레벨업!현제레벨은 최근레벨입니다 출력
			공격력이 고치공격력으로 증가했습니다 출력
		}
			
	}
}
}

-------------------------------------------------------------------------------------------------------------------------
// 1단계
1. 체력 , 포만도, 배변활동 선언 후 값 초기화, 입력 받을 변수를 선언
2. while 반목문을 이용, 해당 블록에서 분기문 작성 및 병걸릴 조건과 게임오버 조건 작성
3. 분기문에 추가적으로 산책하기, 터그활동 작성
4. 랜덤함수 이용 산책하기, 터그활동 시 적 어카운트 작성
5, 적 체력변수, 적 공격력변수 , 다마고치 공격력 변수 선언 및 값 초기화
6. 적 스킬함수(패시브), 다마고치 스킬함수(마나사용) 작성 및 적어카운트 시 활성화 하도록 구현
7. 보상골드 변수 선언 및 값 초기화, 분기문에 상점 추가적으로 작성
8. 적 사망조건 작성 및 다마고치 경험치 변수선언, 다마고치 최종승리조건 작성
9. 만들고 나서 보니 개선점이 필요하여 추가 작업함 
   -> stress 변수가 재대로 활용되지 않아 할수 없는 분기 작동할때(최대마나, 최대체력 에서 계속 잠자기) 그리고 도망칠때 마다 +10 씩 값 초기화 , 적을 서치시 10씩 스트레스가 해소된다.
      , mana 회복 : 잠자기 에서 처리해주기 + 7입력 후 가이드라인 출력
	->랜덤함수 이용해서 처리하는 부분이 percent1,percent2 변수 이용하는게 낭비라고 생각되어 확률 함수를 만들기로함
	 ->출력문들 모두 void 함수로 만들어서 main함수에서 실행 가능하게 만들어줬다, main 함수 위에다 정의해서 따로 선언안해줘도 된다.
	 ->main함수에 있는 지역변수들 라인밖으로 다 빼서 전역변수화 시킨다음, swithc 분기문 1~3 6,7 같이 간단한 기능을 가진 애들만 함수화 시켜서
	 main()함수에 간략하게 실행 할수 있도록 하여 코드 가독성을 높혔다, 또한 이과정에서 함수안에 함수를 사용하려면 내부 함수를 라인 밖에서 선언해야 이용할 수 있다는 걸알음
	 그리고 분기문 이용할때 입력만 처리되지 않도록 함수 만들어 놓고 case 랑 break로 해당구문제어 해야 원하는 기능을 사용할 수 있다.
	 main 함수에서 최소한의 프로세스만 남기고 전부 함수화 처리했다.
	-> 스트레스값 - 영역으로 내려가는 부분 확인 -> 이부분 처리하는 블록 확인 후 최저 값 0으로 고정시켜주기!
	-> 전역변수들 전부 지역변수로 바꿔주고 정상실행 시켜보기 -> 이부분에서는 포인터를 이용할 수 밖에 없다.